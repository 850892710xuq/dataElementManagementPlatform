// src/utils/request.ts
import axios from "axios";
import { ElMessage } from "element-plus";
var service = axios.create({
  baseURL: "/api",
  // 设置统一的请求前缀
  timeout: 15e3,
  // 请求超时时间
  headers: {
    "Content-Type": "application/json;charset=utf-8"
  }
});
service.interceptors.request.use(
  (config) => {
    return config;
  },
  (error) => {
    console.error("\u8BF7\u6C42\u9519\u8BEF:", error);
    return Promise.reject(error);
  }
);
service.interceptors.response.use(
  (response) => {
    const res = response.data;
    if (res.code === 200) {
      return res;
    } else {
      ElMessage.error(res.message || "\u64CD\u4F5C\u5931\u8D25");
      return Promise.reject(new Error(res.message || "\u64CD\u4F5C\u5931\u8D25"));
    }
  },
  (error) => {
    let message = "";
    const status = error.response?.status;
    switch (status) {
      case 400:
        message = "\u8BF7\u6C42\u9519\u8BEF";
        break;
      case 401:
        message = "\u672A\u6388\u6743";
        break;
      case 403:
        message = "\u62D2\u7EDD\u8BBF\u95EE";
        break;
      case 404:
        message = "\u8BF7\u6C42\u5730\u5740\u51FA\u9519";
        break;
      case 408:
        message = "\u8BF7\u6C42\u8D85\u65F6";
        break;
      case 500:
        message = "\u670D\u52A1\u5668\u5185\u90E8\u9519\u8BEF";
        break;
      case 501:
        message = "\u670D\u52A1\u672A\u5B9E\u73B0";
        break;
      case 502:
        message = "\u7F51\u5173\u9519\u8BEF";
        break;
      case 503:
        message = "\u670D\u52A1\u4E0D\u53EF\u7528";
        break;
      case 504:
        message = "\u7F51\u5173\u8D85\u65F6";
        break;
      case 505:
        message = "HTTP\u7248\u672C\u4E0D\u53D7\u652F\u6301";
        break;
      default:
        message = "\u7F51\u7EDC\u8FDE\u63A5\u6545\u969C";
    }
    console.error("\u54CD\u5E94\u9519\u8BEF:", error);
    ElMessage.error(message);
    return Promise.reject(error);
  }
);

// src/api/task-schedule-mock.ts
import { Random } from "mockjs";
function randomPastDate() {
  const now = /* @__PURE__ */ new Date();
  const pastTime = now.getTime() - Random.integer(1, 72) * 60 * 60 * 1e3;
  return new Date(pastTime).toISOString().replace("T", " ").substring(0, 19);
}
function randomFutureDate() {
  const now = /* @__PURE__ */ new Date();
  const futureTime = now.getTime() + Random.integer(1, 24) * 60 * 60 * 1e3;
  return new Date(futureTime).toISOString().replace("T", " ").substring(0, 19);
}
function formatTimeInterval(minutes) {
  if (minutes < 60) {
    return `${minutes}\u5206\u949F`;
  } else {
    const hours = Math.floor(minutes / 60);
    const remainingMinutes = minutes % 60;
    return remainingMinutes > 0 ? `${hours}\u5C0F\u65F6${remainingMinutes}\u5206\u949F` : `${hours}\u5C0F\u65F6`;
  }
}
var productNames = [
  "\u5236\u9020\u4E1A\u751F\u4EA7\u6570\u636E\u5206\u6790\u4EA7\u54C1",
  "\u519C\u4E1A\u6C14\u8C61\u6570\u636E\u5206\u6790\u4EA7\u54C1",
  "\u91D1\u878D\u4EA4\u6613\u6570\u636E\u5206\u6790\u4EA7\u54C1",
  "\u533B\u7597\u5065\u5EB7\u6570\u636E\u5206\u6790\u4EA7\u54C1",
  "\u96F6\u552E\u9500\u552E\u6570\u636E\u5206\u6790\u4EA7\u54C1",
  "\u7269\u6D41\u8FD0\u8F93\u6570\u636E\u5206\u6790\u4EA7\u54C1",
  "\u80FD\u6E90\u6D88\u8017\u6570\u636E\u5206\u6790\u4EA7\u54C1",
  "\u6559\u80B2\u5B66\u4E60\u6570\u636E\u5206\u6790\u4EA7\u54C1",
  "\u623F\u5730\u4EA7\u6570\u636E\u5206\u6790\u4EA7\u54C1",
  "\u65C5\u6E38\u51FA\u884C\u6570\u636E\u5206\u6790\u4EA7\u54C1"
];
function generateRandomId() {
  return `TASK-${Random.string("0123456789", 8)}`;
}
function generateRunningTasks(count) {
  const tasks = [];
  for (let i = 0; i < count; i++) {
    const startTime = randomPastDate();
    tasks.push({
      id: generateRandomId(),
      dataProductName: Random.pick(productNames),
      progress: Random.integer(10, 95),
      startTime,
      expectedEndTime: randomFutureDate(),
      status: Random.pick(["\u8FD0\u884C\u4E2D" /* RUNNING */, "\u6682\u505C" /* PAUSED */, "\u5F02\u5E38" /* ERROR */])
    });
  }
  return tasks;
}
function generateQueuedTasks(count) {
  const tasks = [];
  for (let i = 0; i < count; i++) {
    tasks.push({
      id: generateRandomId(),
      dataProductName: Random.pick(productNames),
      submitTime: randomPastDate(),
      queuePosition: i + 1,
      expectedWaitTime: formatTimeInterval(Random.integer(15, 480))
      // 15分钟到8小时之间
    });
  }
  return tasks;
}
function mockGetRunningTaskList(params) {
  const { id, dataProductName, status, currentPage, pageSize } = params;
  let allTasks = generateRunningTasks(50);
  if (id) {
    allTasks = allTasks.filter((task) => task.id.includes(id));
  }
  if (dataProductName) {
    allTasks = allTasks.filter((task) => task.dataProductName.includes(dataProductName));
  }
  if (status) {
    allTasks = allTasks.filter((task) => task.status === status);
  }
  const total = allTasks.length;
  const start = (currentPage - 1) * pageSize;
  const end = start + pageSize;
  const list = allTasks.slice(start, end);
  return {
    code: 200,
    data: {
      list,
      total,
      currentPage,
      pageSize
    },
    message: "\u83B7\u53D6\u6210\u529F"
  };
}
function mockGetQueuedTaskList(params) {
  const { id, dataProductName, currentPage, pageSize } = params;
  let allTasks = generateQueuedTasks(30);
  if (id) {
    allTasks = allTasks.filter((task) => task.id.includes(id));
  }
  if (dataProductName) {
    allTasks = allTasks.filter((task) => task.dataProductName.includes(dataProductName));
  }
  allTasks.forEach((task, index) => {
    task.queuePosition = index + 1;
  });
  const total = allTasks.length;
  const start = (currentPage - 1) * pageSize;
  const end = start + pageSize;
  const list = allTasks.slice(start, end);
  return {
    code: 200,
    data: {
      list,
      total,
      currentPage,
      pageSize
    },
    message: "\u83B7\u53D6\u6210\u529F"
  };
}
function mockRemoveTask(id) {
  return {
    code: 200,
    data: true,
    message: "\u4EFB\u52A1\u79FB\u9664\u6210\u529F"
  };
}
function mockGetStatusOptions() {
  return {
    code: 200,
    data: [
      { label: "\u8FD0\u884C\u4E2D", value: "\u8FD0\u884C\u4E2D" /* RUNNING */ },
      { label: "\u6682\u505C", value: "\u6682\u505C" /* PAUSED */ },
      { label: "\u5F02\u5E38", value: "\u5F02\u5E38" /* ERROR */ }
    ],
    message: "\u83B7\u53D6\u6210\u529F"
  };
}

// src/mock/task-schedule.ts
var taskScheduleMock = [
  // 获取运行中任务列表
  {
    url: "/api/task-schedule/running",
    method: "get",
    response: ({ query }) => {
      return mockGetRunningTaskList({
        id: query.id,
        dataProductName: query.dataProductName,
        status: query.status,
        currentPage: parseInt(query.currentPage) || 1,
        pageSize: parseInt(query.pageSize) || 10
      });
    }
  },
  // 获取排队中任务列表
  {
    url: "/api/task-schedule/queued",
    method: "get",
    response: ({ query }) => {
      return mockGetQueuedTaskList({
        id: query.id,
        dataProductName: query.dataProductName,
        currentPage: parseInt(query.currentPage) || 1,
        pageSize: parseInt(query.pageSize) || 10
      });
    }
  },
  // 移除运行中任务
  {
    url: "/api/task-schedule/running/:id",
    method: "delete",
    response: ({ params }) => {
      return mockRemoveTask(params.id);
    }
  },
  // 获取任务状态选项
  {
    url: "/api/task-schedule/status-options",
    method: "get",
    response: () => {
      return mockGetStatusOptions();
    }
  }
];
var task_schedule_default = taskScheduleMock;
export {
  task_schedule_default as default
};
//# sourceMappingURL=data:application/json;base64,
